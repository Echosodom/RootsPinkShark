//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg
{ 

public sealed partial class EventOption :  Bright.Config.BeanBase 
{
    public EventOption(JSONNode _json) 
    {
        { if(!_json["EventOptionName"].IsString) { throw new SerializationException(); }  EventOptionName = _json["EventOptionName"]; }
        { if(!_json["EventOptionDesc"].IsString) { throw new SerializationException(); }  EventOptionDesc = _json["EventOptionDesc"]; }
        { var __json0 = _json["Limit"]; if(!__json0.IsArray) { throw new SerializationException(); } Limit = new System.Collections.Generic.List<EventCondition>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { EventCondition __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = EventCondition.DeserializeEventCondition(__e0);  }  Limit.Add(__v0); }   }
        { var __json0 = _json["AttrLimit"]; if(!__json0.IsArray) { throw new SerializationException(); } AttrLimit = new System.Collections.Generic.List<EventCondition>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { EventCondition __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = EventCondition.DeserializeEventCondition(__e0);  }  AttrLimit.Add(__v0); }   }
        { var __json0 = _json["InputSpace"]; if(!__json0.IsArray) { throw new SerializationException(); } InputSpace = new System.Collections.Generic.List<ResourceType>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { ResourceType __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = (ResourceType)__e0.AsInt; }  InputSpace.Add(__v0); }   }
        { var __json0 = _json["OptionWinEffect"]; if(!__json0.IsArray) { throw new SerializationException(); } OptionWinEffect = new System.Collections.Generic.List<EventEffect>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { EventEffect __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = EventEffect.DeserializeEventEffect(__e0);  }  OptionWinEffect.Add(__v0); }   }
        { var __json0 = _json["OptionLoseEffect"]; if(!__json0.IsArray) { throw new SerializationException(); } OptionLoseEffect = new System.Collections.Generic.List<EventEffect>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { EventEffect __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = EventEffect.DeserializeEventEffect(__e0);  }  OptionLoseEffect.Add(__v0); }   }
        PostInit();
    }

    public EventOption(string EventOptionName, string EventOptionDesc, System.Collections.Generic.List<EventCondition> Limit, System.Collections.Generic.List<EventCondition> AttrLimit, System.Collections.Generic.List<ResourceType> InputSpace, System.Collections.Generic.List<EventEffect> OptionWinEffect, System.Collections.Generic.List<EventEffect> OptionLoseEffect ) 
    {
        this.EventOptionName = EventOptionName;
        this.EventOptionDesc = EventOptionDesc;
        this.Limit = Limit;
        this.AttrLimit = AttrLimit;
        this.InputSpace = InputSpace;
        this.OptionWinEffect = OptionWinEffect;
        this.OptionLoseEffect = OptionLoseEffect;
        PostInit();
    }

    public static EventOption DeserializeEventOption(JSONNode _json)
    {
        return new EventOption(_json);
    }

    /// <summary>
    /// 选项名称
    /// </summary>
    public string EventOptionName { get; private set; }
    /// <summary>
    /// 选项描述
    /// </summary>
    public string EventOptionDesc { get; private set; }
    /// <summary>
    /// 特定条件
    /// </summary>
    public System.Collections.Generic.List<EventCondition> Limit { get; private set; }
    /// <summary>
    /// 属性要求
    /// </summary>
    public System.Collections.Generic.List<EventCondition> AttrLimit { get; private set; }
    /// <summary>
    /// 投入物品栏
    /// </summary>
    public System.Collections.Generic.List<ResourceType> InputSpace { get; private set; }
    /// <summary>
    /// 成功效果
    /// </summary>
    public System.Collections.Generic.List<EventEffect> OptionWinEffect { get; private set; }
    /// <summary>
    /// 失败效果
    /// </summary>
    public System.Collections.Generic.List<EventEffect> OptionLoseEffect { get; private set; }

    public const int __ID__ = 1656861583;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in Limit) { _e?.Resolve(_tables); }
        foreach(var _e in AttrLimit) { _e?.Resolve(_tables); }
        foreach(var _e in OptionWinEffect) { _e?.Resolve(_tables); }
        foreach(var _e in OptionLoseEffect) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in Limit) { _e?.TranslateText(translator); }
        foreach(var _e in AttrLimit) { _e?.TranslateText(translator); }
        foreach(var _e in OptionWinEffect) { _e?.TranslateText(translator); }
        foreach(var _e in OptionLoseEffect) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "EventOptionName:" + EventOptionName + ","
        + "EventOptionDesc:" + EventOptionDesc + ","
        + "Limit:" + Bright.Common.StringUtil.CollectionToString(Limit) + ","
        + "AttrLimit:" + Bright.Common.StringUtil.CollectionToString(AttrLimit) + ","
        + "InputSpace:" + Bright.Common.StringUtil.CollectionToString(InputSpace) + ","
        + "OptionWinEffect:" + Bright.Common.StringUtil.CollectionToString(OptionWinEffect) + ","
        + "OptionLoseEffect:" + Bright.Common.StringUtil.CollectionToString(OptionLoseEffect) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
